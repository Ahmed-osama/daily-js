{"version":3,"sources":["types.ts","declarations.ts","assertions.ts","index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAY,KAAZ;;AAAA,CAAA,UAAY,KAAZ,EAAiB;AAAG,EAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AAAK,EAAA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AAAO,EAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AAAM,CAAtC,EAAY,KAAK,GAAL,OAAA,CAAA,KAAA,KAAA,OAAA,CAAA,KAAA,GAAK,EAAL,CAAZ;;;;;;ACRa,OAAA,CAAA,GAAA,GAAM,UAAC,CAAD,EAAgB,CAAhB,EAA6B;AAA5B,MAAA,CAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,CAAA,GAAA,CAAA;AAAa;;AAAE,MAAA,CAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,CAAA,GAAA,CAAA;AAAa;;AAAa,SAAA,CAAC,GAAG,CAAJ;AAAK,CAArD;;;;;ACAb,IAAI,KAAK,GAAa,CAAC,MAAD,EAAS,OAAT,CAAtB;AACW,OAAA,CAAA,GAAA,GAAe,KAAkB,CAAC,MAAlC;;AAQX,SAAgB,WAAhB,CAA4B,IAA5B,EAA8C,GAA9C,EAA6D;AAAjC,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,CAAA;AAAgB;;AAAE,MAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,CAAA;AAAe;;AACzD,SAAO;AACH,IAAA,IAAI,EAAA,IADD;AAEH,IAAA,GAAG,EAAA;AAFA,GAAP;AAIH;;AALD,OAAA,CAAA,WAAA,GAAA,WAAA;;;;;;ACTA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA,EAGA;;;AACA,IAAM,KAAK,GAAW;AAClB,EAAA,IAAI,EAAE,OADY;AAElB,EAAA,GAAG,EAAE,EAFa;AAGlB,EAAA,IAAI,EAAE,gBAAA;AAAM,WAAA,CAAA;AAAC,GAHK;AAIlB,EAAA,QAAQ,EAAE,CAAC,OAAD,CAJQ;AAKlB,EAAA,GAAG,EAAE;AALa,CAAtB;AAOA,IAAI,GAAG,GAAU,OAAA,CAAA,KAAA,CAAM,GAAvB,EAEA;;AACA,IAAI,SAAS,GAAG,cAAA,CAAA,GAAA,CAAI,CAAJ,EAAO,CAAP,CAAhB,EACA;;AACA,IAAI,QAAQ,GAAG,YAAA,CAAA,WAAA,CAAY,EAAZ,EAAgB,EAAhB,CAAf;AACA,OAAO,CAAC,GAAR,CAAY,QAAZ","file":"index.map","sourceRoot":"../TypeScript","sourcesContent":["export interface Person {\n    name: string,\n    age: number,\n    children: string[],\n    job: any,\n    walk: () => number\n}\n\nexport enum Color { red, green, blue }","export const add = (a: number = 1, b: number = 1): number => a + b","let input: string[] = ['Judy', 'renad']\nexport let len: number = (input as string[]).length\n// export let len2: number = (<Array<string>>input).length\n// export let len3: number = (<string[]>input).length\n// export let len4: number = (input as string[]).length\ninterface Pos {\n    long: number,\n    lat: number\n}\nexport function createPoint(long: number = 0, lat: number = 0): Pos {\n    return {\n        long,\n        lat\n    }\n}","import { Person, Color } from './types';\nimport { add } from './declarations';\nimport { len, createPoint } from './assertions';\n\n\n// Types\nconst ahmed: Person = {\n    name: \"ahmed\",\n    age: 28,\n    walk: () => 2,\n    children: [\"Hmaza\"],\n    job: 'Frontender'\n}\nlet red: Color = Color.red\n\n// Declarations\nlet addOutput = add(5, 6)\n//assertions \nlet mapPoint = createPoint(25, 43)\nconsole.log(mapPoint)\n\n\n"]}